User
    ident Text
    password Text Maybe
    UniqueUser ident
    deriving Generic   
    deriving Typeable    


Email
    email Text
    user UserId Maybe
    verkey Text Maybe
    UniqueEmail email

-- By default this file is used in Model.hs (which is imported by Foundation.hs)
-- Because the auth structure requires a special user thing I just have made a new user tag
-- I don't think it will be a problem but we will see


UserTag
  user UserId       -- user id of THIS user
  owner UserId      -- person who created this user
  group GroupId     -- group this user is a part of by default
  superGroup GroupId   -- owner Group
  defaultDash  DashboardId
  phone Int Maybe default = Nothing
  name Text Maybe default = Nothing
  UniqueUserTag user --REMEMBER THIS HAS TO BE PAIRED WITH AN ENSURE INDEX
  deriving Generic
  deriving Typeable
  deriving Read
  deriving Show
  deriving Eq


-- =====================DASHBOARD TYPES ===============================

Dashboard
  owner UserId Maybe
  gId GroupId Maybe
  group Group Maybe
  name Text Maybe 
  notes Text Maybe
  default Bool Maybe
  header HeaderWidget Maybe 
  panels [MenuPanel] Maybe

-- Sub Object is my workaround for adding pieces to a panel
SubObject
 panels [MenuPanel]

ContentObj
 icon Text
 title Text
 link Text
 size Int
 plist ContentConfig Maybe
 minState Bool Maybe
 editState Bool Maybe

ContentArray 
 arr [ContentObj]

MenuPanel
  bidx BranchIndex 
  open Bool 
  mconfig MConfigObject 
  sub SubObject Maybe
  carr ContentArray Maybe
  name Text Maybe

SubMenuJoin
  parent MenuPanelId
  child MenuPanelId

ContentArrayJoin
 panel MenuPanelId
 content ContentArrayId

-- =======================================================================
Group
    owner UserId    -- who made this group
    group GroupId  -- owner group
    name Text
    description Text
    UniqueGroup name
    deriving Generic
    deriving Read
    deriving Show
    deriving Eq		

GroupUserJoin
    gId   GroupId 
    uId   UserId 
    UniqueGroupUserJoin gId uId
    deriving Read
    deriving Show

OnpingAlarmCombined
    location_id  Int
    timer_unit_id  Int Maybe
    group_id  Int Maybe
    name  Text
    alias  Text Maybe
    description  Text Maybe
    text_message  Text Maybe
    code  Text Maybe 
    last_update  Text Maybe
    result  Text Maybe 
    status_enabled  Int Maybe
    status_user_enabled  Int Maybe 
    status_force_trip  Int Maybe
    timer_active  Int Maybe
    timer_recall  Int Maybe
    timer_cleared  Int Maybe
    delete  Int Maybe
    UniqueAlarmCombined name location_id

OnpingTagCombined
  location_id               Int   Maybe
  slave_parameter_id        Int   Maybe
  parameter_tag_id          Int   Maybe
  description               Text  Maybe  
  unit_id                   Int   Maybe 
  status_active             Int   Maybe 
  status_writable           Int   Maybe
  last_update               UTCTime Maybe 
  result                    Text  Maybe  
  validation_code           Text  Maybe  
  permissions               Int   Maybe 
  delete                    Int   Maybe 
  companyIdRef		    Int   Maybe
  siteIdRef                 Int   Maybe						
  location		    Location Maybe
  pid			    Int Maybe
  deriving Ord
  deriving Eq

-- LocationTableWidget
--   pidlist [Text]
--   descriptionlist [Text]
--   locationlist [Text]
--   keyparams [[[Text]]]

OnpingTagHistory
  pid			    Int Maybe
  time			    UTCTime Maybe
  val			    Double Maybe


--Quieries

ParameterHistory
  startDate UTCTime Maybe
  endDate   UTCTime Maybe
  locationId Int Maybe
  slave_parameter_id Int Maybe

-- Smaller collection for testing MongoDB ideas
TestCollection
  idx Int Maybe
  val Int Maybe
  time UTCTime Maybe


-- Parameters always have their own Company, Site, location But
-- sometimes it is useful to have them separated 

Company
   name                     Text
   address                  Text
   city                     Text
   state                    Text
   zip                      Text
   delete                   Int
   companyIdRef             Int
   group                    GroupId Maybe
   owner                    UserId  Maybe
   UniqueCompany name
   UniqueCompanyId companyIdRef




Site
   companyIdRef Int
   name Text
   pull Int
   delete Int
   siteIdRef Int
   UniqueSite name



Location 
   siteIdRef Int
   slaveId   Int 
   refId     Int --same as location_id
   name Text 
   url Text 
   delete   Int
   companyIdRef Int
   UniqueLocation refId
   deriving Ord
   deriving Eq
Robot
   name  Text
   password Text
   salt Text 
   UniqueRobotName name


Unit 
  name Text 
  si Text 
  delete Int
  uid    Int

-- Widget Types

LocationTableWidget
    pidlist [Text]
    descriptionlist [Text]
    locationlist [Text]
    keyparams [[[Text]]]
    

MultiLocationTableWidget
    locationlist [Text]
    keyparams [[Text]]
    slaveids [Text]
    locationNames [Text]
    

PDFTableWidget
    pdflist [Text]
    

CalendarWidget 
    userId UserId
    titles [Text]
    days [Int]
    hours [Int]
    mins [Int]
    durations [Int]
    allday [Bool]
    deriving Generic
    UniqueUserId userId
    

Prospective 
    user  Text

ReportRow 
    rname Text
    rdata [Int]
    

AutoReport
    arData [ReportRow]
    


RollingReportConfig
  title Text
  runevery Int
  entries [RollingReportConfigEntry]
  dashboard DashboardId Maybe default = Nothing
  deriving Generic

RollingReportConfigEntry
  title Text
  pids [[RollingReportPid]]
  daysback [Int]
  deriving Generic

RollingReportPid
  pid Int
  description Text
  location Text
  deriving Generic

-- ==================================================
-- Mask Types 
-- ==================================================

MaskScript 
  content Text

MaskTypeJoin
   value MaskDataStore    
   mID  MaskTypeId Maybe
   pKey Int
   defaultSelect Bool
   name Text Maybe default = Nothing
   deriving Generic 
   

-- the 'Store suffix indicates a bytestring encoded with 
-- So MaskDataStore means the ByteString Stores MaskData
-- Data.SafeCopy

MaskDataStore 
   value ByteString
   deriving Generic

MaskType 
  name  Text
  tagNames  [Text]
  inputValues [Int]
  value MaskDataStore
  script MaskScriptId 
  UniqueMaskType script
  deriving Generic

-- ==================================================
-- Call Order
-- ==================================================

CallOrder
  name  Text
  userNames [Text]
  order [UserId]
  repeatCounts [Int]
  owner UserId
  gId GroupId
  gPermissions UserPermissionsList
  deriving Generic

-- ==================================================
-- Alarm Stuff
-- ==================================================

Alarm 
 name Text
 maskId MaskTypeId Maybe
 value MaskDataStore
 corderId CallOrderId
 pids [Int]
 alarmActive Bool
 customName Bool
 tripTime Int
 recallTime Int
 clearTime Int
 ownerId UserId
 gId GroupId
 gPermissions UserPermissionsList
 deriving Generic

-- ==================================================
-- Single Well Types
-- ==================================================
SingleWellExtras
 locationId Int
 url Text
 pollTime Int
 port Int Maybe
 protocol Text
 deriving Generic
 deriving Eq
 deriving Ord


-- =================================
-- AlarmDelete
AlarmDelete
 flag AlarmId
 deriving Generic
